import pymysql
import pymysql.cursors
import pandas as pd
import sys
import io
import tensorflow as tf 

sys.stdin = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

#connect
co = pymysql.connect(host="localhost", user = "root", password="1234", charset="utf8", db = "mysql") # 시간표
ci = pymysql.connect(host="localhost", user = "root", password="1234", charset="utf8", db = "mysql") # 사용자 정보 
cursor = co.cursor() # 24/2학기 시간표 
cio = ci.cursor() #졸업요구학점표 


cursor.execute("SELECT * FROM sys.making")
cio.execute("SELECT * FROM sys.ntui")
cur =cursor.fetchall()
cio.fetchall()
    
timetable= []
weekly = ['월','화','수','목','금','토']
reweekly=[]
h = False
def get_int_input(prompt):
    while True:
        try:
                return int(input(prompt))  # 입력을 정수로 변환하여 반환
        except ValueError:
            print("잘못된 입력입니다. 정수를 입력해 주세요.")


# 사용자로부터 정보 입력받기
name = input("이름을 입력하세요 : ")
major = input("전공을 입력하세요(ex: 소프트웨어융합전공) :")
shift = input("주간/야간을 입력하세요(ex: 주간) : ")
number = get_int_input("학번을 입력하세요(ex:19) : ")
grade = input("학년을 입력하세요(ex: 4학년) :")
score = get_int_input("요번 학기에 들을 학점을 입력하세요(ex: 18) : ")
choice_weekly = list(input("선호하는 요일을 입력하세요(ex: 월,화): ").split(","))



        # SQL 쿼리 작성 (파라미터화된 쿼리 사용)
if major == "소프트웨어융합전공":
    if number <= 19:
        script = '''insert into sys.ntui(username,major,기초문해교육,핵심교양,기초과학교육,전공필수,전공선택,잔여학점,졸업학점) values(%s,%s,7,12,12,18,66,15,130)'''
    elif number >19 : 
        script = '''insert into sys.ntui(username,major,기초문해교육,핵심교양,기초과학교육,전공필수,전공선택,잔여학점,졸업학점) values(%s,%s,9,33,0,18,60,10,130)'''    

    cio.execute(script, (name,major))
    ci.commit()




ans = input("자신이 수강한 적이 있어서 졸업요구학점에 반영할거면 y 없으면 n을 눌러주세요 : ")
if ans == "y":


    # 기존 요구 학점을 데이터베이스에서 가져옴
    select_script = '''
    SELECT 기초문해교육, 핵심교양, 기초과학교육, 전공필수, 전공선택, 잔여학점 
    FROM sys.ntui 
    WHERE username = %s AND major = %s
    '''
    cio.execute(select_script, (name, major))
    result = cio.fetchone()


    if result :
        기초문해교육, 핵심교양, 기초과학교육, 전공필수, 전공선택, 잔여학점 = result


            
        basic = get_int_input("기초문해교육 몇 학점 이수하셨습니까? : ")
        core = get_int_input("핵심교양 몇 학점 이수하셨습니까? : ")
        basics = get_int_input("기초과학교육 몇 학점 이수하셨습니까? : ")
        tr = get_int_input("전공필수 몇 학점 이수하셨습니까? : ")
        ts = get_int_input("전공선택 몇 학점 이수하셨습니까? : ")
        rem = get_int_input("잔여학점 몇 학점 이수하셨습니까? : ")

        기초문해교육_남은학점 = 기초문해교육 - basic
        핵심교양_남은학점 = 핵심교양 - core
        기초과학교육_남은학점 = 기초과학교육 - basics
        전공필수_남은학점 = 전공필수 -tr
        전공선택_남은학점 = 전공선택 - ts
        잔여학점_남은학점 = 잔여학점 - rem

        update_script = '''
        UPDATE sys.ntui 
        SET 기초문해교육 = %s, 핵심교양 = %s, 기초과학교육 = %s, 전공필수 = %s, 전공선택 = %s, 잔여학점 = %s 
        WHERE username = %s AND major = %s
        '''

        cio.execute(update_script, (기초문해교육_남은학점, 핵심교양_남은학점, 기초과학교육_남은학점, 전공필수_남은학점, 전공선택_남은학점, 잔여학점_남은학점, name, major))
        ci.commit()
        print("업데이트 되었습니다.")


        cio.execute(select_script, (name, major))
        up_result = cio.fetchone()
        if up_result:
            기초문해교육, 핵심교양, 기초과학교육, 전공필수, 전공선택, 잔여학점 = up_result
            print("졸업요구학점 업데이트 했습니다 ")
            
            print(f"\n{name}님, 졸업요구학점 업데이트 결과입니다.")
            print(f"기초문해교육 남은 학점: {up_result[0]}")
            print(f"핵심교양 남은 학점: {up_result[1]}")
            print(f"기초과학교육 남은 학점: {up_result[2]}")
            print(f"전공필수 남은 학점: {up_result[3]}")
            print(f"전공선택 남은 학점: {up_result[4]}")
            print(f"잔여학점 남은 학점: {up_result[5]}")




print(전공필수)
print(전공선택)



    
# if  number >= 21 and major == "소프트웨어융합전공" :
#     print("미적분학1,미적분학2,선형대수학,확률과통계는 기초과학교육 지정 교과목입니다.(4과목 이수시 4영역인정)")
#     print("영역별 3학점씩 이수해야합니다. (1~3)")

    






# 전공 넣는거 
for i in range(len(cur)):
    if major == cur[i][2] and grade == cur[i][3] and shift == cur[i][4]:
        timetable.append(cur[i])
print(timetable)


# 선호하지 않는 요일
reweekly = set(weekly) - set(choice_weekly) 
print(reweekly)

# 중복된 과목을 찾기 위한 맵 생성
course_map = {}
for i, entry in enumerate(timetable):
    course_name = entry[7]
    if course_name in course_map:
        course_map[course_name].append(i)
    else:
        course_map[course_name] = [i]
# 
# 중복된 항목에 대해 사용자가 삭제할 항목을 선택하도록 함
major_timetable = timetable[:]
for course_name, indices in course_map.items():
    if len(indices) > 1:
        print(f"\n중복된 과목: {course_name}")
        for idx, actual_index in enumerate(indices):
            print(f"{idx + 1}. {timetable[actual_index]}")

        # 사용자가 삭제할 항목을 선택
        choice = int(input(f"\n삭제할 항목의 번호를 선택하세요 (1-{len(indices)}): ")) - 1

        # 선택한 항목을 삭제
        major_timetable.pop(indices[choice])



# 초과학점 삭제 
sum = 0
sum1 = 0
tr_tem = []
ts_tem=[]
for i in range(len(major_timetable)):

    if major_timetable[i][11] == "전공필수":
        sum += int(major_timetable[i][17])
        tr_tem.append(major_timetable[i])            
    elif major_timetable[i][11] == "전공선택":
        sum1 += int(major_timetable[i][17])
        ts_tem.append(major_timetable[i])

sum = 전공필수 - sum
if sum < 0 : 
    ans1 = input(("전공필수 학점이 초과했습니다 그래도 넣어시겠습니까? (y/n)" ))
    if ans1 == "y":
        pass
    elif ans1 == "n":
        for i in range(len(tr_tem)):
            print(tr_tem[i][7])
            
        sa = list(input("전공필수들 중에서 듣지 않을 과목을 입력하세요 ex(**,**)").split(","))
        major_timetable = sa + major_timetable 
        major_timetable = list(set(major_timetable))   

    else:
        print("다시입력하세요")


sum1 = 전공선택 - sum1
if sum1 < 0 : 
    ans2 = input(("전공선택 학점이 초과했습니다 그래도 넣어시겠습니까? (y/n)" ))
    if ans2 == "y":
        pass
    elif ans2 == "n":
        for i in range(len(ts_tem)):
            print(ts_tem[i][7])
                
        sa1 = list(input("전공선택들 중에서 듣지 않을 과목을 입력하세요 ex(**,**)").split(","))
        major_timetable = sa1 + major_timetable 
        major_timetable = list(set(major_timetable))   

    else:
        print("다시입력하세요")



# 최종 시간표 출력
print("\n전공 시간표:")
for item in major_timetable:
    print(item)


# 선호하지 않는 요일이 있다고 판별하는것 
for i in range(len(major_timetable)):
    q = major_timetable[i][23]
    for q1 in q:
        if q1 in reweekly:
            h = True
            break

if h:
    print("선호하지 않은 요일이 있습니다. 요일에 포함 시키겠습니까 아니면 전공 요일만 넣겠습니까?")
    answer = get_int_input("넣으실거면 1 전공 요일만 넣으실거면 2를 눌러주세요 : ")
    if answer == 1 :
        print(reweekly)
        answer2 = list(input("넣으실 요일을 입력하세요(ex: 금) : ").split(','))
        choice_weekly += answer2
    else : 
        h = False
else:
    print("양호")

print(choice_weekly)

# 전공 학점을 뺀 나머지 학점 구하기 
for i in range(len(major_timetable)):
    a = major_timetable[i][17]

    score -= a
print("전공을 뺀 남은 학점은 : ",score )
 

# # # 교양인것들만 리스트에 넣기 

# # culture_imetable = [] 
# # for i in range(len(cur)):
# #     if "브라이트칼리지" == cur[i][1] and shift == cur[i][4]:
# #         culture_imetable.append(cur[i])
# # print(len(culture_imetable))

# # reweekly = set(weekly) - set(choice_weekly) 

# # # (선호하지 않는 요일 삭제)역순으로 순회하면서 해당 요일이 포함된 항목 삭제
# # for i in range(len(culture_imetable) - 1, -1, -1):  # 역순으로 리스트 순회
# #     q = culture_imetable[i][23]  # 요일 리스트
# #     # q 중 하나라도 reweekly에 포함되면 삭제
# #     if any(day in reweekly for day in q):  
# #         culture_imetable.pop(i)  # 해당 항목 삭제

# # print(len(culture_imetable))


# # # 요일과 시간 범위를 추출하는 함수
# # def extract_day_and_time(range_str):
# #     ranges = range_str.split(' / ')
# #     result = []
# #     for r in ranges:
# #         try:
# #             day, time_range = r.split(' ')
# #             day = day.strip('()')  # 괄호 제거
# #             start_time, end_time = map(float, time_range.split('~'))
# #             result.append((day, start_time, end_time))
# #         except ValueError as e:
# #             print(f"Error processing range '{r}': {e}")
# #             continue  # 잘못된 범위는 무시하고 계속 진행
# #     return result


# # if score ==0 : 
# #     print("들을 수 있는 학점이 없습니다 ")
# # else: 
# #     template = []
# # for i in range(len(major_timetable)):
# #     template.append(major_timetable[i][23])

# # # 겹치지 않는 범위를 저장할 리스트
# #     non_subjects = []

# # # range2의 모든 항목에 대해 겹치지 않는 범위를 확인
# #     for entry in culture_imetable:
# #         range2 = entry[23]

# #         ranges2 = extract_day_and_time(range2)
# #         overlap_found = False  # 겹침 여부 초기화

# #         # range2의 각 범위 부분에 대해 겹침 확인
# #         for range2_day, range2_start, range2_end in ranges2:
# #             for range1 in template:
# #                 ranges1 = extract_day_and_time(range1)

# #                 # 각 범위에 대해 겹침 여부 확인
# #                 for range1_day, range1_start, range1_end in ranges1:
# #                     # 요일이 같고 시간이 겹치면 overlap_found를 True로 설정
# #                     if range1_day == range2_day and not (range1_end <= range2_start or range1_start >= range2_end):
# #                         overlap_found = True
# #                         break  # 겹침 발견 시 루프 중단
                
# #                 if overlap_found:
# #                     break  # 범위가 겹치면 더 이상 확인할 필요 없음

# #             if overlap_found:
# #                 break  # range2의 어떤 부분에서 겹치면 전체를 스킵

# #         # 겹치지 않으면 non_overlapping_ranges에 추가
# #         if not overlap_found:
# #             non_subjects.append(entry)

# #     # 교양 시간(조건에 맞지 않는 것들을 걸러낸 것)
# # for i in range(len(non_subjects)) :
# #     print("겹치지 않는 교양 시간 :", non_subjects[i][5],non_subjects[i][7],non_subjects[i][23])



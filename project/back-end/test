import pymysql
from flask import Flask, request, jsonify
from flask_cors import CORS
import random
import difflib
from multiprocessing import Pool
from datetime import datetime, timedelta
import logging
import json

app = Flask(__name__)
CORS(app)

# 로깅 설정
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# 데이터베이스 연결 설정
university_db = pymysql.connect(
    host="localhost",
    user="root",
    password="admin",
    charset="utf8",
    db="university"
)
university_cursor = university_db.cursor(pymysql.cursors.DictCursor)

user_db = pymysql.connect(
    host="localhost",
    user="root",
    password="admin",
    charset="utf8",
    db="user_db"
)
user_cursor = user_db.cursor(pymysql.cursors.DictCursor)

# 수업 교시를 시간으로 변환하는 함수
def convert_class_period_to_time(period):
    period_to_time = {
        1: ('09:00', '09:50'),
        2: ('10:00', '10:50'),
        3: ('11:00', '11:50'),
        4: ('12:00', '12:50'),
        5: ('13:00', '13:50'),
        6: ('14:00', '14:50'),
        7: ('15:00', '15:50'),
        8: ('16:00', '16:50'),
        9: ('17:00', '17:50'),
        10: ('18:00', '18:45'),
        11: ('18:45', '19:30'),
        12: ('19:35', '20:20'),
        13: ('20:20', '21:05'),
        14: ('21:10', '21:55'),
        15: ('21:55', '22:40')
    }
    return period_to_time.get(period, ('00:00', '00:00'))

# 시간표 문자열을 파싱하는 함수
def parse_timetable(timetable_str):
    parsed_timetable = []
    for time_slot in timetable_str.split('/'):
        day, periods = time_slot.strip().split(' ')
        start_period, end_period = map(float, periods.split('~'))
        
        start_time = convert_class_period_to_time(int(start_period))[0]
        end_time = convert_class_period_to_time(int(end_period))[1]
        
        # 0.5 교시 처리 (예: 1.5교시는 1교시 시작 후 25분 뒤 시작)
        if start_period % 1 == 0.5:
            start_time = (datetime.strptime(start_time, '%H:%M') + timedelta(minutes=25)).strftime('%H:%M')
        if end_period % 1 == 0.5:
            end_time = (datetime.strptime(end_time, '%H:%M') + timedelta(minutes=25)).strftime('%H:%M')
        
        parsed_timetable.append(f"{day} {start_time}~{end_time}")
    
    return ' / '.join(parsed_timetable)

# 사용자 데이터를 가져오는 함수
def fetch_user_data(user_id):
    logger.debug(f"Fetching user data for user_id: {user_id}")
    query = "SELECT * FROM users WHERE id = %s"
    user_cursor.execute(query, (user_id,))
    user_data = user_cursor.fetchone()
    logger.debug(f"Fetched user data: {user_data}")
    return user_data

# 미이수 필수 과목을 가져오는 함수
def fetch_uncompleted_required_courses(major, grade):
    logger.debug(f"Fetching uncompleted required courses for major: {major}, grade: {grade}")
    query = "SELECT 전공명, 학년, `주/야`, 과목명, 분반, 이수구분, 학점, 교수명, 시간표, 영역 FROM `2024-1-schedule` WHERE 전공명 = %s AND 이수구분 = '전공필수' AND 학년 = %s"
    university_cursor.execute(query, (major, grade))
    courses = university_cursor.fetchall()
    logger.debug(f"Fetched {len(courses)} uncompleted required courses: {courses}")
    for course in courses:
        course['시간표'] = parse_timetable(course['시간표'])
    return courses

# 적절한 선택 과목을 가져오는 함수
def fetch_appropriate_electives(major, shift, preferred_days):
    logger.debug(f"Fetching appropriate electives for major: {major}, shift: {shift}, preferred_days: {preferred_days}")
    query = "SELECT 전공명, 학년, `주/야`, 과목명, 분반, 이수구분, 학점, 교수명, 시간표, 영역 FROM `2024-1-schedule` WHERE 전공명 = %s AND 이수구분 = '전공선택' AND `주/야` = %s AND 시간표 IN %s"
    university_cursor.execute(query, (major, shift, tuple(preferred_days)))
    courses = university_cursor.fetchall()
    for course in courses:
        course['시간표'] = parse_timetable(course['시간표'])
    logger.debug(f"Fetched {len(courses)} appropriate electives")
    return courses

# 적절한 교양 과목을 가져오는 함수
def fetch_appropriate_liberal_arts(preferred_days, morning_afternoon, include_night, selected_areas, include_elective_liberal_arts):
    logger.debug(f"Fetching appropriate liberal arts courses for preferred_days: {preferred_days}, morning_afternoon: {morning_afternoon}, include_night: {include_night}, selected_areas: {selected_areas}, include_elective_liberal_arts: {include_elective_liberal_arts}")
    query = """
    SELECT 전공명, `주/야`, 영역, 과목명, 분반, 이수구분, 학점, 교수명, 시간표 
    FROM `2024-1-schedule` 
    WHERE 이수구분 IN ('핵심교양', '소양교양') 
    AND 시간표 IN %s 
    AND 영역 IN %s
    """
    university_cursor.execute(query, (tuple(preferred_days), tuple(selected_areas)))
    courses = university_cursor.fetchall()
    
    filtered_courses = filter_courses_by_morning_afternoon(courses, morning_afternoon, include_night)
    
    if not include_elective_liberal_arts:
        filtered_courses = [course for course in filtered_courses if course['이수구분'] != '소양교양']
    
    for course in filtered_courses:
        course['시간표'] = parse_timetable(course['시간표'])
    
    logger.debug(f"Fetched {len(filtered_courses)} appropriate liberal arts courses")
    return filtered_courses

# 상담 과목을 가져오는 함수
def fetch_advisory_course():
    logger.debug("Fetching advisory course")
    query = "SELECT 전공명, 학년, `주/야`, 과목명, 분반, 이수구분, 학점, 교수명, 시간표, 영역 FROM `2024-1-schedule` WHERE 이수구분 = '비교과' LIMIT 1"
    university_cursor.execute(query)
    course = university_cursor.fetchone()
    if course:
        course['시간표'] = parse_timetable(course['시간표'])
    logger.debug(f"Fetched advisory course: {course}")
    return course

# 모든 과목을 가져오는 함수
def fetch_all_courses():
    logger.debug("Fetching all courses")
    query = "SELECT 전공명, 학년, `주/야`, 과목명, 분반, 이수구분, 학점, 교수명, 시간표, 영역 FROM `2024-1-schedule`"
    university_cursor.execute(query)
    courses = university_cursor.fetchall()
    for course in courses:
        course['시간표'] = parse_timetable(course['시간표'])
    logger.debug(f"Fetched {len(courses)} courses in total")
    return courses

# 필수 과목을 추가하는 함수
def add_required_courses(user_data, remaining_credits):
    logger.debug("Adding required courses")
    required_courses = []
    if remaining_credits['required_major'] > 0:
        required_courses = fetch_uncompleted_required_courses(user_data['major'], user_data['grade'])
    logger.debug(f"Added {len(required_courses)} required courses")
    return required_courses

# 선택 과목과 교양 과목을 추가하는 함수
def add_elective_and_liberal_arts_courses(user_data, remaining_credits, preferred_days, morning_afternoon, include_night, shift, selected_areas, include_elective_liberal_arts):
    logger.debug("Adding elective and liberal arts courses")
    elective_courses = []
    liberal_arts_courses = []
    
    if remaining_credits['elective_major'] > 0:
        elective_courses = fetch_appropriate_electives(user_data['major'], shift, preferred_days)
    
    if remaining_credits['core_liberal_arts'] > 0:
        liberal_arts_courses = fetch_appropriate_liberal_arts(preferred_days, morning_afternoon, include_night, selected_areas, include_elective_liberal_arts)
    
    elective_courses = filter_courses_by_morning_afternoon(elective_courses, morning_afternoon, include_night)

    logger.debug(f"Added {len(elective_courses)} elective courses and {len(liberal_arts_courses)} liberal arts courses")
    return elective_courses + liberal_arts_courses

# 상담 과목을 추가하는 함수
def add_advisory_course(include_advisory):
    logger.debug("Adding advisory course")
    advisory_course = []
    if include_advisory:
        advisory = fetch_advisory_course()
        if advisory:
            advisory_course.append(advisory)
    logger.debug(f"Added {len(advisory_course)} advisory course")
    return advisory_course

# 오전/오후 선호도에 따라 과목을 필터링하는 함수
def filter_courses_by_morning_afternoon(courses, morning_afternoon, include_night):
    logger.debug(f"Filtering courses by morning/afternoon preference: {morning_afternoon}, include_night: {include_night}")
    if morning_afternoon == 'all':
        return courses  # 모든 과목 반환
    
    filtered_courses = []
    for course in courses:
        start_times = course['시간표'].split('/')
        for start_time in start_times:
            time = start_time.split(' ')[1].split('~')[0]
            hour = int(time.split(':')[0])
            if morning_afternoon == 'morning' and 9 <= hour < 12:
                filtered_courses.append(course)
                break
            elif morning_afternoon == 'afternoon' and 12 <= hour < 18:
                filtered_courses.append(course)
                break
            elif morning_afternoon == 'evening' and hour >= 18:
                if include_night:
                    filtered_courses.append(course)
                break
            elif morning_afternoon == 'all':
                if hour < 18 or (hour >= 18 and include_night):
                    filtered_courses.append(course)
                break
    logger.debug(f"Filtered {len(filtered_courses)} courses")
    return filtered_courses

# 과목의 우선순위를 계산하는 함수
def calculate_course_priority(course, user_grade, remaining_credits, include_teacher_training):
    priority = 0
    
    if int(course['학년']) == user_grade:
        priority += 100
    elif int(course['학년']) < user_grade:
        priority += 50

    if course['이수구분'] == '전공필수' and remaining_credits['required_major'] > 0:
        priority += 200
    elif course['이수구분'] == '전공선택' and remaining_credits['elective_major'] > 0:
        priority += 150
    elif course['이수구분'] == '핵심교양' and remaining_credits['core_liberal_arts'] > 0:
        priority += 100
    elif course['이수구분'] == '소양교양' and remaining_credits['elective_liberal_arts'] > 0:
        priority += 50
    elif course['이수구분'] == '교직필수':
        if include_teacher_training:
            priority += 175  # 전공필수(200) 다음, 전공선택(150) 이전
        else:
            priority += 25  # 포함하지 않을 경우 우선순위를 가장 낮게 설정

    priority += int(course['학점']) * 10

    return priority

# 시간표 충돌을 해결하는 함수
def resolve_schedule_conflicts(timetable, user_grade, remaining_credits, include_teacher_training):
    logger.debug("Resolving schedule conflicts")
    final_timetable = []
    time_slots = {}
    
    for course in timetable:
        course_priority = calculate_course_priority(course, user_grade, remaining_credits, include_teacher_training)
        course_times = course['시간표'].split('/')
        for time in course_times:
            if time in time_slots:
                if course_priority > time_slots[time]['priority']:
                    time_slots[time] = {'course': course, 'priority': course_priority}
            else:
                time_slots[time] = {'course': course, 'priority': course_priority}

    final_timetable = list(set(slot['course'] for slot in time_slots.values()))
    logger.debug(f"Resolved conflicts, final timetable has {len(final_timetable)} courses")
    return final_timetable

# 유사한 과목을 찾는 함수
def find_similar_courses(course, all_courses, num_suggestions=3):
    logger.debug(f"Finding similar courses for: {course['과목명']}")
    course_name = course['과목명']
    similar_course_names = difflib.get_close_matches(course_name, [c['과목명'] for c in all_courses], n=num_suggestions, cutoff=0.6)
    similar_courses = [c for c in all_courses if c['과목명'] in similar_course_names and c['과목명'] != course_name]
    logger.debug(f"Found {len(similar_courses)} similar courses")
    return similar_courses

# 시간  충돌을 확인하는 함수
def is_time_conflict(timetable, new_course):
    new_course_times = set(new_course['시간표'].split('/'))
    for course in timetable:
        existing_times = set(course['시간표'].split('/'))
        if new_course_times & existing_times:
            return True
    return False

# 대체 과목을 찾는 함수
def find_alternative_courses(course, all_courses, timetable, max_alternatives=3):
    logger.debug(f"Finding alternative courses for: {course['과목명']}")
    similar_courses = find_similar_courses(course, all_courses)
    alternatives = []
    for alt_course in similar_courses:
        if not is_time_conflict(timetable, alt_course):
            alternatives.append(alt_course)
            if len(alternatives) >= max_alternatives:
                break
    logger.debug(f"Found {len(alternatives)} alternative courses")
    return alternatives

# 시간표를 생성하는 주요 함수
def generate_timetable(user_id, dynamic_data):
    logger.debug(f"Starting timetable generation for user {user_id}")
    logger.debug(f"Dynamic data: {json.dumps(dynamic_data, indent=2)}")
    
    # 1. 사용자 데이터 가져오기
    user_data = fetch_user_data(user_id)
    logger.debug(f"Fetched user data: {user_data}")
    
    if not user_data:
        logger.error(f"User not found: {user_id}")
        return {"error": "사용자를 찾을 수 없습니다."}, 404

    # 2. 동적 데이터에서 필요한 정보 추출
    max_credits = dynamic_data.get('max_credits', 21)
    preferred_days = dynamic_data.get('preferred_days', ['월', '화', '수', '목', '금'])
    morning_afternoon = dynamic_data.get('morning_afternoon', 'all')
    include_night = dynamic_data.get('include_night', False)
    shift = dynamic_data.get('shift', '주간')
    selected_areas = dynamic_data.get('selected_areas', ['1영역', '2영역', '3영역', '4영역'])
    include_elective_liberal_arts = dynamic_data.get('include_elective_liberal_arts', False)
    include_teacher_training = dynamic_data.get('include_teacher_training', False)
    user_grade = dynamic_data.get('grade', user_data.get('grade', 1))

    # 3. 남은 학점 계산
    remaining_credits = {
        "basic_literacy": user_data.get("basic_literacy", 0) - user_data.get("completed_basic_literacy", 0),
        "core_liberal_arts": user_data.get("core_liberal_arts", 0) - user_data.get("completed_core_liberal_arts", 0),
        "basic_science": user_data.get("basic_science", 0) - user_data.get("completed_basic_science", 0),
        "required_major": user_data.get("required_major", 0) - user_data.get("completed_required_major", 0),
        "elective_major": user_data.get("elective_major", 0) - user_data.get("completed_elective_major", 0),
        "elective_liberal_arts": user_data.get("elective_liberal_arts", 0) - user_data.get("completed_elective_liberal_arts", 0),
    }

    logger.debug(f"Remaining credits: {remaining_credits}")

    # 4. 과목 추가
    advisory_course = add_advisory_course(dynamic_data.get('include_advisory', False))
    required_courses = add_required_courses(user_data, remaining_credits)
    elective_and_liberal_arts = add_elective_and_liberal_arts_courses(
        user_data,
        remaining_credits,
        preferred_days,
        morning_afternoon,
        include_night,
        shift,
        selected_areas,
        include_elective_liberal_arts
    )

    logger.debug(f"Advisory course: {advisory_course}")
    logger.debug(f"Required courses: {required_courses}")
    logger.debug(f"Elective and liberal arts courses: {elective_and_liberal_arts}")

    # 5. 초기 시간표 생성
    initial_timetable = required_courses + elective_and_liberal_arts + advisory_course
    random.shuffle(initial_timetable)

    logger.debug(f"Initial timetable size: {len(initial_timetable)}")
    logger.debug(f"Initial timetable: {initial_timetable}")

    # 6. 최종 시간표 생성
    final_timetable = []
    alternative_courses = {}
    current_credits = 0
    all_courses = fetch_all_courses()

    for course in initial_timetable:
        course_credits = int(course['학점'])
        if current_credits + course_credits <= max_credits:
            if not is_time_conflict(final_timetable, course):
                final_timetable.append(course)
                current_credits += course_credits
            else:
                alternatives = find_alternative_courses(course, all_courses, final_timetable)
                if alternatives:
                    final_timetable.append(alternatives[0])
                    current_credits += int(alternatives[0]['학점'])
                    alternative_courses[course['과목명']] = alternatives[1:]
        else:
            break

    # 7. 시간표 충돌 해결
    final_timetable = resolve_schedule_conflicts(final_timetable, user_grade, remaining_credits, include_teacher_training)

    logger.debug(f"Final timetable after conflict resolution: {final_timetable}")

    if len(final_timetable) < 1:  # 최소 1개 과목 보장
        logger.error("Failed to generate a valid timetable")
        return {"error": "유효한 시간표를 생성할 수 없습니다."}, 400

    logger.debug(f"Final timetable size: {len(final_timetable)}")
    logger.debug(f"Total credits: {current_credits}")

    
    # 8. 결과 반환
    result = {
        "timetable": [
            {
                "name": course['과목명'],
                "day": course['시간표'].split(' ')[0],
                "start_time": course['시간표'].split(' ')[1].split('~')[0],
                "end_time": course['시간표'].split(' ')[1].split('~')[1],
                "professor": course['교수명'],
                "credits": course['학점'],
                "course_type": course['이수구분']
            } for course in final_timetable
        ],
        "remaining_credits": remaining_credits,
        "total_credits": current_credits,
        "alternative_courses": {
            course: [
                {
                    "name": alt['과목명'],
                    "day": alt['시간표'].split(' ')[0],
                    "start_time": alt['시간표'].split(' ')[1].split('~')[0],
                    "end_time": alt['시간표'].split(' ')[1].split('~')[1],
                    "professor": alt['교수명'],
                    "credits": alt['학점'],
                    "course_type": alt['이수구분']
                } for alt in alternatives
            ] for course, alternatives in alternative_courses.items()
        }
    }
    logger.debug(f"Final result: {json.dumps(result, indent=2, ensure_ascii=False)}")
    return result
# Flask 라우트 - 시간표 생성 요청 처리
@app.route('/generate-timetable', methods=['POST'])
def handle_generate_timetable_request():
    logger.debug("Received request to generate timetable")
    data = request.json
    logger.debug(f"Received data: {json.dumps(data, indent=2, ensure_ascii=False)}")
    user_id = data.get('user_id')
    dynamic_data = data.get('dynamic_data')

    if not user_id:
        logger.error("Missing user_id in request")
        return jsonify({"error": "user_id가 필요합니다."}), 400

    result = generate_timetable(user_id, dynamic_data)
    logger.debug(f"Timetable generated successfully for user {user_id}")
    logger.debug(f"Returning result: {json.dumps(result, indent=2, ensure_ascii=False)}")
    return jsonify(result)

if __name__ == "__main__":
    app.run(port=5000)
